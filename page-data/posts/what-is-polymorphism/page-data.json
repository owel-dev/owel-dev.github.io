{"componentChunkName":"component---src-templates-post-template-post-template-tsx","path":"/posts/what-is-polymorphism","result":{"data":{"markdownRemark":{"id":"c0313366-078d-593b-a9c5-f354e63e8a06","html":"<h1 id=\"객체지향에서-다형성이란-무엇인가와-사용-이유\" style=\"position:relative;\"><a href=\"#%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5%EC%97%90%EC%84%9C-%EB%8B%A4%ED%98%95%EC%84%B1%EC%9D%B4%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80%EC%99%80-%EC%82%AC%EC%9A%A9-%EC%9D%B4%EC%9C%A0\" aria-label=\"객체지향에서 다형성이란 무엇인가와 사용 이유 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>객체지향에서 다형성이란 무엇인가와 사용 이유</h1>\n<p>객체지향 프로그래밍에서 다형성이란<br>\n특정 타입의 객체가 여러가지 타입으로 변화할 수 있는 성질을 말합니다.</p>\n<p>개인적으로 객체지향 프로그래밍의 가장 중요한 목적은<br>\n고치기 쉬운(== 변화에 유연한) 코드를 작성하도록 하는 것이며<br>\n그 중 다형성은 고치기 쉬운 코드를 작성하기 위한 가장 중요한 개념이라고 생각합니다.</p>\n<p>Java에서는 Interface라는 기능을 이용하여 이를 구현할 수 있습니다.\n이 글에서는 Java를 이용하여 다형성이 코드에서 어떻게 구현되며<br>\n어떻게 고치기 쉬운 코드를 만들어주는지에 대해 설명해 보겠습니다.<br/></p>\n<h2 id=\"수정-지옥의-발생\" style=\"position:relative;\"><a href=\"#%EC%88%98%EC%A0%95-%EC%A7%80%EC%98%A5%EC%9D%98-%EB%B0%9C%EC%83%9D\" aria-label=\"수정 지옥의 발생 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>수정 지옥의 발생</h2>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// Cat.java</span>\n<span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Cat</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">makeSound</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"야옹~\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Main.java</span>\n<span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Stirng</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Cat</span> cat <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Cat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        cat<span class=\"token punctuation\">.</span><span class=\"token function\">makeSound</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 출력</span>\n<span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span>\n야옹<span class=\"token operator\">~</span>\n\n</code></pre></div>\n<p>위 코드에서 <code class=\"language-text\">Main</code> 클래스는 <code class=\"language-text\">Cat</code> 클래스를 사용하고 있습니다.<br>\n<code class=\"language-text\">Cat</code> 클래스의 인스턴스를 생성하고 변수에 할당한 후<br>\n해당 변수를 이용해 <code class=\"language-text\">Cat</code> 클래스의 <code class=\"language-text\">makeSound()</code> 메서드를 호출하여 고양이 울음소리를 출력하고 있습니다.</p>\n<p>그런데 <code class=\"language-text\">Main</code> 클래스에서 고양이 울음소리가 아니라<br>\n강아지 울음소리(”멍멍!”)를 출력해야 하는 변경사항이 생긴다면 어떻게 해야 할까요?</p>\n<p><code class=\"language-text\">Cat</code> 클래스의 <code class=\"language-text\">makeSound()</code> 메서드의 내용을 <code class=\"language-text\">System.out.println(\"멍멍!\");</code> 으로 바꾸자니<br>\n클래스 이름은 <code class=\"language-text\">Cat</code> 인데, 강아지 울음소리를 내는 메서드를 가지고 있다? 뭔가 맞지 않습니다.</p>\n<p>그리고, <code class=\"language-text\">Main</code> 클래스가 아닌 다른 클래스에서 <code class=\"language-text\">Cat</code> 클래스를 사용하고 있을 수도 있으므로<br>\n<code class=\"language-text\">Dog</code> 라는 이름의 클래스를 새로 만드는 것이 바람직해 보입니다.\n</br></p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// Cat.java</span>\n<span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Cat</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">makeSound</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"야옹~\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Dog.java</span>\n<span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Cat</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">void</span> <span class=\"token function\">makeHowl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"멍멍!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Main.java</span>\n<span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Stirng</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Cat</span> cat <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Cat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        cat<span class=\"token punctuation\">.</span><span class=\"token function\">makeSound</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>자, <code class=\"language-text\">Dog</code> 클래스를 새로 만들어 보았습니다.<br>\n이제 <code class=\"language-text\">Main</code> 클래스를 고양이 울음소리가 아닌,<br>\n강아지 울음소리를 출력하는 프로그램으로 만들기 위해서는 3군데의 코드를 고쳐야 합니다.</p>\n<ol>\n<li><code class=\"language-text\">new Cat();</code> → <code class=\"language-text\">new Dog();</code></li>\n<li><code class=\"language-text\">Cat cat</code> → <code class=\"language-text\">Dog dog;</code></li>\n<li><code class=\"language-text\">cat.makeSound();</code> → <code class=\"language-text\">dog.makeHowl();</code></li>\n</ol>\n<p><code class=\"language-text\">Main</code> 클래스는 고작 2줄짜리 프로그램인데 고쳐야 할 부분이 한 두 군데가 아니네요.<br>\n만약, Main 클래스 파일의 코드가 1000줄이었고, 코드 여기저기서</p>\n<ul>\n<li><code class=\"language-text\">Cat</code> 클래스의 인스턴스를 생성하고</li>\n<li>인스턴스를 변수에 할당받고</li>\n<li>해당 변수를 사용하여 <code class=\"language-text\">Cat</code> 클래스의 메서드를 호출하기도 하고</li>\n<li><strong><code class=\"language-text\">Main</code> 클래스만이 아닌 다른 많은 클래스에서 <code class=\"language-text\">Cat</code> 클래스를 사용하고 있었고<br>\n그 중 100개의 클래스의 <code class=\"language-text\">Cat</code> 클래스를 <code class=\"language-text\">Dog</code> 클래스로 바꿔야 하는 상황이라면</strong></li>\n</ul>\n<p><code class=\"language-text\">Cat</code> 클래스를 <code class=\"language-text\">Dog</code> 클래스로 바꿔야 하는 변경사항이 생길 시<br>\n수많은 곳의 코드를 고쳐야 하는 지옥이 펼쳐질 것입니다..</p>\n<p>그런 지옥을 예방하기 위한 방법으로<br>\n객체지향 프로그래밍에서는 <strong>다형성</strong>이란 기능을 제공하며<br>\nJava에서는 이를 Interface 라는 것을 사용하여 구현할 수 있습니다.\n<br/></p>\n<h2 id=\"interface를-이용한-다형성-구현\" style=\"position:relative;\"><a href=\"#interface%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%9C-%EB%8B%A4%ED%98%95%EC%84%B1-%EA%B5%AC%ED%98%84\" aria-label=\"interface를 이용한 다형성 구현 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Interface를 이용한 다형성 구현</h2>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// Animal.java</span>\n<span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span>\n<span class=\"token class-name\">Interface</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token function\">makeSound</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Cat.java</span>\n<span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Cat</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Animal</span><span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@Overide</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">makeSound</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"야옹~\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Dog.java</span>\n<span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Cat</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Animal</span><span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@Overide</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">makeSound</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"멍멍!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">Animal</code> 이라는 Interface를 만들어 보았습니다.<br>\nJava에서는 Interface를 implements한 클래스는<br>\n반드시 Interface의 멤버함수를 Overide(재정의) 하도록 하는 규칙이 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// Main.java</span>\n<span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Stirng</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Interface 타입의 변수는</span>\n        <span class=\"token comment\">// 자신을 구현한 클래스 타입의 인스턴스를 할당받을 수 있다.</span>\n\t\t<span class=\"token class-name\">Animal</span> animal <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Cat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        animal<span class=\"token punctuation\">.</span><span class=\"token function\">makeSound</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Interface를 만들었으니 이제 이를 이용하여 <code class=\"language-text\">Main</code> 클래스의 코드를 바꿔보겠습니다.</p>\n<p><code class=\"language-text\">Cat</code> 클래스의 인스턴스를 할당하는 변수의 타입을 <code class=\"language-text\">Animal</code> 로 바꾸었고<br>\n그 아랫줄에서 <code class=\"language-text\">animal.makeSound()</code> 를 호출하도록 하였습니다.</p>\n<p>Interface를 사용하여 다형성을 이용하게 되면</p>\n<ul>\n<li>Interface 타입의 변수는 구현 클래스의 타입이라면 어떤 타입의 인스턴스도 할당 받을 수 있고 (다형성)</li>\n<li>Interface 를 구현한 클래스들은 같은 이름의 메서드를 가지고 있다는 것이 보장되기에</li>\n</ul>\n<p><code class=\"language-text\">Main</code> 클래스의 코드를 <code class=\"language-text\">Animal</code> Interface를 사용하여 위와 같이 고치면<br>\n<code class=\"language-text\">Main</code> 클래스를 고양이 울음소리를 내는 프로그램에서<br>\n강아지 울음소리를 내는 프로그램으로 바꿔야 하는 변경사항이 발생했을 때<br>\n<code class=\"language-text\">new Cat()</code> -> <code class=\"language-text\">new Dog()</code> 부분의 코드만 바꿔주면<br>\n나머지 부분의 코드는 바꾸지 않아도 프로그램은 정상적으로 동작할 것입니다.</p>\n<p>Interface를 사용하지 않은 경우에는 3군데를 고쳐야 했었는데 이제는 1군데라니..<br>\n<code class=\"language-text\">Main</code> 클래스는 변경사항이 발생했을 때 이전보다 훨씬 유지보수하기 편한 코드가 되었습니다.<br>\n이렇듯 Interface를 이용하여 다형성을 사용하면 변경사항 발생 시 더욱 고치기 쉬운 코드를 작성할 수 있습니다.\n<br/></p>\n<h2 id=\"팩토리-패턴을-이용해-더욱-고치기-쉬운-코드-만들기\" style=\"position:relative;\"><a href=\"#%ED%8C%A9%ED%86%A0%EB%A6%AC-%ED%8C%A8%ED%84%B4%EC%9D%84-%EC%9D%B4%EC%9A%A9%ED%95%B4-%EB%8D%94%EC%9A%B1-%EA%B3%A0%EC%B9%98%EA%B8%B0-%EC%89%AC%EC%9A%B4-%EC%BD%94%EB%93%9C-%EB%A7%8C%EB%93%A4%EA%B8%B0\" aria-label=\"팩토리 패턴을 이용해 더욱 고치기 쉬운 코드 만들기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>팩토리 패턴을 이용해 더욱 고치기 쉬운 코드 만들기</h2>\n<p>그런데 아직 조금 더 개선할 부분이 남아있네요.<br>\nInterface를 이용하여 <code class=\"language-text\">Main</code> 클래스를 이전보다 더욱 고치기 쉬운 코드로 만들었지만<br>\n<code class=\"language-text\">new Cat()</code> -> <code class=\"language-text\">new Dog()</code>로 바꾸는 부분마저 고치지 않아도 되도록 할 수는 없을까요?</p>\n<p>고칠 곳이 3군데에서 1군데로 줄기는 했지만<br>\n만약 수 많은 클래스에서 <code class=\"language-text\">Cat</code> 클래스를 사용하고 있으며<br>\n그 중 100개의 파일에서 <code class=\"language-text\">new Cat()</code> 을 <code class=\"language-text\">new Dog()</code> 로 고쳐줘야 한다면<br>\n이것도 여간 귀찮은 일이 아닐 수 없습니다.</p>\n<p>그래서 아래와 같은 방법을 이용하여 더욱 유지보수하기 편한 코드로 개선할 수 있습니다. </br></p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// AnimalMaker.java</span>\n<span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AnimalMaker</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Cat</span> <span class=\"token function\">makeAnimal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Cat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Main.java</span>\n<span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Stirng</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">AnimalMaker</span> animalMaker <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AnimalMaker</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">Animal</span> animal <span class=\"token operator\">=</span> animalMaker<span class=\"token punctuation\">.</span><span class=\"token function\">makeAnimal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        animal<span class=\"token punctuation\">.</span><span class=\"token function\">makeSound</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Main2.java</span>\n<span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main2</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Stirng</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">AnimalMaker</span> animalMaker2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AnimalMaker</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">Animal</span> animal2 <span class=\"token operator\">=</span> animalMaker2<span class=\"token punctuation\">.</span><span class=\"token function\">makeAnimal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        animal2<span class=\"token punctuation\">.</span><span class=\"token function\">makeSound</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Main3.java</span>\n<span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main3</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Stirng</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">AnimalMaker</span> animalMaker3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AnimalMaker</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">Animal</span> animal3 <span class=\"token operator\">=</span> animalMaker3<span class=\"token punctuation\">.</span><span class=\"token function\">makeAnimal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        animal3<span class=\"token punctuation\">.</span><span class=\"token function\">makeSound</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">Cat</code> 클래스의 인스턴스를 생성한 후 이를 반환하는 <code class=\"language-text\">makeAnimal()</code> 라는 메서드를 가진<br>\n<code class=\"language-text\">AnimalMaker</code> 클래스를 만들었습니다.</p>\n<p><code class=\"language-text\">Main</code>, <code class=\"language-text\">Main2</code>, <code class=\"language-text\">Main3</code> 클래스에서는<br>\n<code class=\"language-text\">AnimalMaker</code> 클래스를 이용하여 <code class=\"language-text\">Cat</code> 클래스를 간접적으로 사용하고 있습니다.</p>\n<p>이제 <code class=\"language-text\">Cat</code> 클래스를 <code class=\"language-text\">Dog</code> 클래스로 바꾸어야 하는 변경사항이 발생하면</p>\n<p><code class=\"language-text\">Main</code>, <code class=\"language-text\">Main2</code>, <code class=\"language-text\">Main3</code> 각각의 클래스에서<br>\n<code class=\"language-text\">new Cat()</code> -> <code class=\"language-text\">new Dog()</code>로 수정할 필요 없이<br>\n<code class=\"language-text\">AnimalMaker</code> 클래스에서만 <code class=\"language-text\">new Cat()</code> -> <code class=\"language-text\">new Dog()</code>로 수정하면 되도록<br>\n더욱 고치기 쉬운 코드를 만들어 보았습니다.\n<br/>\n<code class=\"language-text\">AnimalMaker</code> 처럼 특정 객체를 생성하고 이를 반환하는 메서드를 가진 클래스를 사용하여<br>\n객체의 생성과 사용을 직접 하는 것이 아닌 간접적으로 하는 방식을 <strong>팩토리 패턴</strong> 이라고 합니다.</p>\n<p>객체지향 패러다임에서 다형성과 팩토리 패턴 같은 객체지향의 특성들을 이용하면<br>\n변경사항이 발생했을 때 고치기 쉬운, 유지보수하기 좋은 유연한 코드를 작성할 수 있습니다.</p>","fields":{"slug":"/posts/2023-05-28---객체지향과-다형성//posts/what-is-polymorphism","tagSlugs":["/tag/oop/","/tag/java/"]},"frontmatter":{"date":"2023-05-28T17:00:00.169Z","description":"우리를 수정 지옥에서 벗어나게 해줄 다형성에 대해 알아보겠습니다.","tags":["OOP","Java"],"title":"객체지향에서 다형성이란 무엇인가와 사용 이유","socialImage":null}}},"pageContext":{"slug":"/posts/2023-05-28---객체지향과-다형성//posts/what-is-polymorphism"}},"staticQueryHashes":["251939775","2764776372","401334301"]}